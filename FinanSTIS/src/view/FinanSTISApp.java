/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.DatabaseOperationsImpl;
import controller.ExpenseController;
import java.awt.*;
import javax.swing.*;

/**
 *
 * @author Yedija Lewi Suryadi (222212921 - 2KS1 - Politeknik Statistika STIS 2024)
 */
public class FinanSTISApp extends javax.swing.JFrame {

    /**
     * Creates new form FinanSTISApp
     */
    
    private CardLayout cardLayout;
    private JPanel mainPanel;
    private boolean isLoggedIn = false;
    private int currentUser;
    private ExpenseController expenseController;
    private DashboardPanel dashboardPanel;
    private PemasukanPanel pemasukanPanel;
    private PengeluaranPanel pengeluaranPanel;
    private TransferPanel transferPanel;
    private TransaksiPanel transaksiPanel;

    public FinanSTISApp() {
        setTitle("FinanSTIS");
        setSize(600, 750);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        expenseController = new ExpenseController(new DatabaseOperationsImpl());

        initMenuBar();
        initCardLayout();

        setVisible(true);
    }

    private void initMenuBar() {
        setJMenuBar(MenuFactory.createMenuBar(this));
    }

    private void initCardLayout() {
        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        // Tambahkan login panel terlebih dahulu
        mainPanel.add(new LoginPanel(this), "login");

        add(mainPanel);
    }

    public void setLoggedIn(boolean loggedIn) {
        this.isLoggedIn = loggedIn;
    }

    public boolean isLoggedIn() {
        return isLoggedIn;
    }

    public void setCurrentUser(int userId) {
        this.currentUser = userId;
    }

    public int getCurrentUser() {
        return currentUser;
    }

    public DashboardPanel getDashboardPanel() {
        if (dashboardPanel == null) {
            dashboardPanel = new DashboardPanel(expenseController, currentUser, this);
        }
        dashboardPanel.setCurrentUser(currentUser);
        return dashboardPanel;
    }

    public PemasukanPanel getPemasukanPanel() {
        if (pemasukanPanel == null) {
            pemasukanPanel = new PemasukanPanel(expenseController, this, currentUser);
        }
        return pemasukanPanel;
    }

    public PengeluaranPanel getPengeluaranPanel() {
        if (pengeluaranPanel == null) {
            pengeluaranPanel = new PengeluaranPanel(expenseController, this, currentUser);
        }
        return pengeluaranPanel;
    }

    public TransferPanel getTransferPanel() {
        if (transferPanel == null) {
            transferPanel = new TransferPanel(expenseController, this, currentUser);
        }
        return transferPanel;
    }

    public TransaksiPanel getTransaksiPanel() {
        if (transaksiPanel == null) {
            transaksiPanel = new TransaksiPanel(expenseController, currentUser);
        }
        transaksiPanel.setCurrentUser(currentUser);
        return transaksiPanel;
    }

    public void showView(String viewName) {
        if (viewName.equals("dashboard")) {
            mainPanel.add(getDashboardPanel(), "dashboard");
        } else if (viewName.equals("pemasukan")) {
            mainPanel.add(getPemasukanPanel(), "pemasukan");
        } else if (viewName.equals("pengeluaran")) {
            mainPanel.add(getPengeluaranPanel(), "pengeluaran");
        } else if (viewName.equals("transfer")) {
            mainPanel.add(getTransferPanel(), "transfer");
        } else if (viewName.equals("transaksi")) {
            mainPanel.add(getTransaksiPanel(), "transaksi");
        }
        cardLayout.show(mainPanel, viewName);
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new FinanSTISApp());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
